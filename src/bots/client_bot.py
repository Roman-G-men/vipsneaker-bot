# src/bots/client_bot.py
import json
import logging
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton, WebAppInfo
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes

import config  # <--- –í–æ—Ç —ç—Ç–∞ —Å—Ç—Ä–æ–∫–∞
from database import SessionLocal
from database import queries
from services import order_processor
from utils.helpers import format_order_message

logger = logging.getLogger(__name__)


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    db = SessionLocal()
    try:
        user = queries.get_or_create_user(db, update.effective_user)
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.telegram_id} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞.")
    finally:
        db.close()

    keyboard = [
        [KeyboardButton("üõçÔ∏è –û—Ç–∫—Ä—ã—Ç—å –º–∞–≥–∞–∑–∏–Ω", web_app=WebAppInfo(url=config.WEBAPP_URL))],
        [KeyboardButton("üì¶ –ú–æ–∏ –∑–∞–∫–∞–∑—ã")]
    ]
    text = (
        "Sneaker SHOP ‚Äî –ü—Ä–æ–¥–∞–∂–∞ —Ç–æ–ª—å–∫–æ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã—Ö –≤–µ—â–µ–π\n"
        "–ò–º–µ–µ—Ç—Å—è –±–æ–ª–µ–µ 2000 –æ—Ç–∑—ã–≤–æ–≤!\n"
        "–ú–æ—Å–∫–≤–∞ / –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–π –∫–æ–º–ø–∞–Ω–∏–µ–π –°–î–≠–ö\n\n"
        "–ö–∞–Ω–∞–ª —Å –Ω–∞–ª–∏—á–∏–µ–º: https://t.me/+8Y8sxODeiQIyYTgy\n"
        "–°–≤—è–∑—å / –ü–æ–∫—É–ø–∫–∞: @VibeeAdmin / @kir_tg1"
    )
    await update.message.reply_text(text, reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True))


async def my_orders(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    db = SessionLocal()
    try:
        user = queries.get_or_create_user(db, update.effective_user)
        orders = queries.get_user_orders(db, user)
        if not orders:
            await update.message.reply_text("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤.")
            return

        response_text = "<b>–í–∞—à–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –∑–∞–∫–∞–∑–æ–≤:</b>\n\n"
        for order in orders:
            response_text += (
                f"<b>–ó–∞–∫–∞–∑ ‚Ññ{order.id}</b> –æ—Ç {order.created_at.strftime('%d.%m.%Y %H:%M')}\n"
                f"–°—Ç–∞—Ç—É—Å: <i>{order.status}</i>\n"
                f"–°—É–º–º–∞: {order.total_amount:.2f} ‚ÇΩ\n"
                "--------------------\n"
            )
        await update.message.reply_html(response_text)
    finally:
        db.close()


async def web_app_data(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    data = json.loads(update.effective_message.web_app_data.data)
    if data.get('event') == 'newOrder':
        order_data = data.get('data', {})
        items = order_data.get('items', [])
        if not items:
            logger.warning(f"–ü–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π –∑–∞–∫–∞–∑ –æ—Ç {update.effective_user.id}")
            return

        db = SessionLocal()
        try:
            user = queries.get_or_create_user(db, update.effective_user)
            new_order = order_processor.process_new_order(db, user, order_data)

            if new_order:
                caption, photo_url = format_order_message(new_order, items)
                if photo_url:
                    await context.bot.send_photo(chat_id=user.telegram_id, photo=photo_url, caption=caption,
                                                 parse_mode='HTML')
                else:
                    await context.bot.send_message(chat_id=user.telegram_id, text=caption, parse_mode='HTML')
                logger.info(f"–°–æ–∑–¥–∞–Ω –∑–∞–∫–∞–∑ #{new_order.id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.telegram_id}")
            else:
                await context.bot.send_message(
                    chat_id=user.telegram_id,
                    text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞. –í–æ–∑–º–æ–∂–Ω–æ, –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ —É–∂–µ –Ω–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
                )

        except Exception as e:
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ web_app_data: {e}", exc_info=True)
            await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        finally:
            db.close()


def create_client_bot_app():
    application = Application.builder().token(config.TOKEN).build()
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & filters.Regex('^üì¶ –ú–æ–∏ –∑–∞–∫–∞–∑—ã$'), my_orders))
    application.add_handler(MessageHandler(filters.StatusUpdate.WEB_APP_DATA, web_app_data))
    return application