# src/bots/admin_bot.py
import logging
from functools import wraps
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (Application, CommandHandler, CallbackQueryHandler, MessageHandler,
                          filters, ContextTypes, ConversationHandler)

import config
from database import SessionLocal, queries
from services import imgbb
from utils.helpers import create_admin_pagination_keyboard

# ==================== –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ó–î–ï–°–¨ ====================
logger = logging.getLogger(__name__)
# ==========================================================

(NAME, BRAND, CATEGORY, DESCRIPTION, COMPOSITION, PHOTO, VARIANTS, CONFIRM) = range(8)


def restricted(func):
    @wraps(func)
    async def wrapped(update: Update, context: ContextTypes.DEFAULT_TYPE, *args, **kwargs):
        if update.effective_user.id not in config.ADMIN_IDS:
            # –¢–µ–ø–µ—Ä—å —ç—Ç–∞ —Å—Ç—Ä–æ–∫–∞ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å, —Ç–∞–∫ –∫–∞–∫ logger –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –≤—ã—à–µ
            logger.warning(f"–ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø –≤ –∞–¥–º–∏–Ω-–±–æ—Ç –æ—Ç {update.effective_user.id}")
            return
        return await func(update, context, *args, **kwargs)

    return wrapped


@restricted
async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    keyboard = [
        [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä", callback_data='add_product')],
        [InlineKeyboardButton("üìù –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤", callback_data='list_products_0')],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    text = '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!'

    if update.callback_query:
        await update.callback_query.answer()
        await update.callback_query.edit_message_text(text, reply_markup=reply_markup)
    else:
        await update.message.reply_text(text, reply_markup=reply_markup)


@restricted
async def add_product_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    context.user_data['product_info'] = {}
    await query.edit_message_text('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:')
    return NAME


async def get_name(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data['product_info']['name'] = update.message.text
    await update.message.reply_text('–í–≤–µ–¥–∏—Ç–µ –±—Ä–µ–Ω–¥ —Ç–æ–≤–∞—Ä–∞:')
    return BRAND


async def get_brand(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data['product_info']['brand'] = update.message.text
    keyboard = [[InlineKeyboardButton("–ö—Ä–æ—Å—Å–æ–≤–∫–∏", callback_data='cat_–ö—Ä–æ—Å—Å–æ–≤–∫–∏'),
                 InlineKeyboardButton("–û–¥–µ–∂–¥–∞", callback_data='cat_–û–¥–µ–∂–¥–∞')]]
    await update.message.reply_text('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:', reply_markup=InlineKeyboardMarkup(keyboard))
    return CATEGORY


async def get_category(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    context.user_data['product_info']['category'] = query.data.split('_')[1]
    await query.edit_message_text('–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:')
    return DESCRIPTION


async def get_description(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data['product_info']['description'] = update.message.text
    await update.message.reply_text('–í–≤–µ–¥–∏—Ç–µ —Å–æ—Å—Ç–∞–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–•–ª–æ–ø–æ–∫ 100%"):')
    return COMPOSITION


async def get_composition(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data['product_info']['composition'] = update.message.text
    await update.message.reply_text('–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞:')
    return PHOTO


async def get_photo(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    photo_file = await update.message.photo[-1].get_file()
    photo_bytes = await photo_file.download_as_bytearray()

    msg = await update.message.reply_text("–ó–∞–≥—Ä—É–∂–∞—é —Ñ–æ—Ç–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä...")
    photo_url = imgbb.upload_image(bytes(photo_bytes))

    if not photo_url:
        await msg.edit_text("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞. –î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ /cancel")
        return PHOTO

    context.user_data['product_info']['photo_url'] = photo_url
    context.user_data['product_info']['variants'] = []

    await msg.edit_text(
        f"–§–æ—Ç–æ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ!\n\n"
        "–¢–µ–ø–µ—Ä—å –¥–æ–±–∞–≤–ª—è–π—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã —Ç–æ–≤–∞—Ä–∞.\n"
        "–û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ: `—Ä–∞–∑–º–µ—Ä —Ü–µ–Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ`\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: `42 15000 5`\n\n"
        "–ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /done",
        parse_mode='Markdown'
    )
    return VARIANTS


async def get_variants(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    try:
        size, price_str, stock_str = update.message.text.strip().split()
        variant_data = {'size': size, 'price': float(price_str), 'stock': int(stock_str)}

        if any(v['size'] == size for v in context.user_data['product_info']['variants']):
            await update.message.reply_text(f"‚ö†Ô∏è –†–∞–∑–º–µ—Ä {size} —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω. –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –µ–≥–æ –ø–æ–∑–∂–µ.")
            return VARIANTS

        context.user_data['product_info']['variants'].append(variant_data)
        await update.message.reply_text(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω —Ä–∞–∑–º–µ—Ä {size}. –ú–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å /done.")
    except (ValueError, TypeError):
        await update.message.reply_text(
            "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `—Ä–∞–∑–º–µ—Ä —Ü–µ–Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ` (–Ω–∞–ø—Ä–∏–º–µ—Ä: `L 5000 10`).")
    return VARIANTS


async def done_adding(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    product_info = context.user_data.get('product_info')
    if not product_info or not product_info.get('variants'):
        await update.message.reply_text(
            "–í—ã –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞. –î–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ /cancel.")
        return VARIANTS

    variants_info = "\n".join(f"  - {v['size']}, {v['price']}‚ÇΩ, {v['stock']} —à—Ç." for v in product_info['variants'])
    text = (f"<b>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º:</b>\n\n"
            f"<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {product_info['name']}\n"
            f"<b>–ë—Ä–µ–Ω–¥:</b> {product_info['brand']}\n"
            f"<b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> {product_info['category']}\n"
            f"<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {product_info['description']}\n"
            f"<b>–°–æ—Å—Ç–∞–≤:</b> {product_info['composition']}\n"
            f"<b>–í–∞—Ä–∏–∞–Ω—Ç—ã:</b>\n{variants_info}")

    keyboard = [[InlineKeyboardButton("‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", callback_data='confirm_save'),
                 InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data='cancel_save')]]

    await update.message.reply_photo(
        photo=product_info['photo_url'],
        caption=text,
        parse_mode='HTML',
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    return CONFIRM


async def save_product_confirmed(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()

    product_info = context.user_data.get('product_info')

    db = SessionLocal()
    try:
        new_product = queries.create_product(db, product_info)
        await query.edit_message_caption(
            caption=f"üéâ –¢–æ–≤–∞—Ä '{new_product.name}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω —Å ID {new_product.id}!", reply_markup=None)
        logger.info(f"–ê–¥–º–∏–Ω {update.effective_user.id} –¥–æ–±–∞–≤–∏–ª —Ç–æ–≤–∞—Ä {new_product.name}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –≤ –ë–î: {e}", exc_info=True)
        await query.edit_message_caption(caption="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞.", reply_markup=None)
    finally:
        db.close()

    context.user_data.clear()
    await start_command(update, context)
    return ConversationHandler.END


async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data.clear()

    if update.callback_query:
        await update.callback_query.answer()
        if update.callback_query.message:
            await update.callback_query.edit_message_text('–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.')
    else:
        await update.message.reply_text('–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.')

    await start_command(update, context)
    return ConversationHandler.END


@restricted
async def list_products(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()
    page = int(query.data.split('_')[2])
    items_per_page = 5

    db = SessionLocal()
    try:
        products, total_items = queries.get_paginated_products(db, page, items_per_page)

        if not products and page == 0:
            await query.edit_message_text("–¢–æ–≤–∞—Ä–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.", reply_markup=InlineKeyboardMarkup(
                [[InlineKeyboardButton("üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='main_menu')]]))
            return

        keyboard = [[InlineKeyboardButton(f"ID {p.id}: {p.name}", callback_data=f'view_product_{p.id}')] for p in
                    products]
        pagination_keys = create_admin_pagination_keyboard(page, total_items, items_per_page, 'list_products')
        keyboard.extend(pagination_keys)
        keyboard.append([InlineKeyboardButton("üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='main_menu')])

        await query.edit_message_text(f'–°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ (–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1}):',
                                      reply_markup=InlineKeyboardMarkup(keyboard))
    finally:
        db.close()


@restricted
async def view_product(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()
    product_id = int(query.data.split('_')[2])

    db = SessionLocal()
    try:
        product = queries.get_product_details(db, product_id)
        if not product:
            await query.edit_message_text("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=InlineKeyboardMarkup(
                [[InlineKeyboardButton("‚óÄÔ∏è –ö —Å–ø–∏—Å–∫—É", callback_data='list_products_0')]]))
            return

        variants_info = "\n".join(
            f"  - {v.size}, {v.price}‚ÇΩ, {v.stock} —à—Ç." for v in product.variants) or "–ù–µ—Ç –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤"
        text = (f"<b>ID:</b> {product.id}\n<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {product.name}\n"
                f"<b>–í–∞—Ä–∏–∞–Ω—Ç—ã:</b>\n{variants_info}")

        keyboard = [
            [InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data=f'delete_confirm_{product.id}')],
            [InlineKeyboardButton("‚óÄÔ∏è –ö —Å–ø–∏—Å–∫—É", callback_data='list_products_0')]
        ]

        await context.bot.send_photo(
            chat_id=query.message.chat_id,
            photo=product.photo_url,
            caption=text,
            parse_mode='HTML',
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        await query.message.delete()

    finally:
        db.close()


@restricted
async def delete_confirm(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    product_id = int(query.data.split('_')[2])
    keyboard = [
        [InlineKeyboardButton("‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f'delete_do_{product_id}')],
        [InlineKeyboardButton("‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∞", callback_data=f'view_product_{product_id}')]
    ]
    await query.answer()
    await query.edit_message_caption(caption=f"–£–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä ID {product_id}?",
                                     reply_markup=InlineKeyboardMarkup(keyboard))


@restricted
async def delete_do(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    product_id = int(query.data.split('_')[2])
    db = SessionLocal()
    try:
        if queries.delete_product(db, product_id):
            await query.answer("–¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω!")
            logger.info(f"–ê–¥–º–∏–Ω {update.effective_user.id} —É–¥–∞–ª–∏–ª —Ç–æ–≤–∞—Ä {product_id}")
            await query.message.delete()
            query.data = 'list_products_0'
            await list_products(update, context)
        else:
            await query.answer("–¢–æ–≤–∞—Ä —É–∂–µ –±—ã–ª —É–¥–∞–ª–µ–Ω.", show_alert=True)
    finally:
        db.close()


def create_admin_bot_app():
    application = Application.builder().token(config.ADMIN_BOT_TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CallbackQueryHandler(add_product_start, pattern='^add_product$')],
        states={
            NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_name)],
            BRAND: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_brand)],
            CATEGORY: [CallbackQueryHandler(get_category, pattern='^cat_')],
            DESCRIPTION: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_description)],
            COMPOSITION: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_composition)],
            PHOTO: [MessageHandler(filters.PHOTO, get_photo)],
            VARIANTS: [CommandHandler('done', done_adding),
                       MessageHandler(filters.TEXT & ~filters.COMMAND, get_variants)],
            CONFIRM: [
                CallbackQueryHandler(save_product_confirmed, pattern='^confirm_save$'),
                CallbackQueryHandler(cancel, pattern='^cancel_save$')
            ],
        },
        fallbacks=[CommandHandler('cancel', cancel), CallbackQueryHandler(cancel, pattern='^main_menu$')],
    )

    application.add_handler(CommandHandler("start", start_command))
    application.add_handler(conv_handler)
    application.add_handler(CallbackQueryHandler(list_products, pattern='^list_products_'))
    application.add_handler(CallbackQueryHandler(view_product, pattern='^view_product_'))
    application.add_handler(CallbackQueryHandler(delete_confirm, pattern='^delete_confirm_'))
    application.add_handler(CallbackQueryHandler(delete_do, pattern='^delete_do_'))
    application.add_handler(CallbackQueryHandler(start_command, pattern='^main_menu$'))
    application.add_handler(CallbackQueryHandler(lambda u, c: u.callback_query.answer(), pattern='^noop$'))

    return application