# bot.py - –ü–û–õ–ù–ê–Ø –§–ò–ù–ê–õ–¨–ù–ê–Ø –í–ï–†–°–ò–Ø –° –í–°–¢–†–û–ï–ù–ù–û–ô TELEGRAM-–ê–î–ú–ò–ù–ö–û–ô

import logging
import os
import io
import requests
import asyncio
from contextlib import suppress
from telegram import Update, WebAppInfo, KeyboardButton, ReplyKeyboardMarkup
from telegram.ext import (
    Application, CommandHandler, ContextTypes, MessageHandler, filters, CallbackContext, ConversationHandler
)
from database import get_session, User, Order, Product, ProductVariant

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ —Ñ–∞–π–ª –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
LOG_FILE_PATH = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'bot.log')
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO,
    handlers=[
        logging.FileHandler(LOG_FILE_PATH),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
TOKEN = os.getenv("TOKEN")
WEBAPP_URL = os.getenv("WEBAPP_URL")
IMGBB_API_KEY = os.getenv("IMGBB_API_KEY")

# –í–ê–ñ–ù–û: –í—Å—Ç–∞–≤—å—Ç–µ —Å—é–¥–∞ —Å–≤–æ–π Telegram User ID. –ß—Ç–æ–±—ã –µ–≥–æ —É–∑–Ω–∞—Ç—å, –Ω–∞–ø–∏—à–∏ –±–æ—Ç—É @userinfobot
ADMIN_IDS = [8141146399, ]

# --- –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –¥–∏–∞–ª–æ–≥–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ ---
(NAME, BRAND, CATEGORY, DESCRIPTION, COMPOSITION, PHOTO, VARIANT_ENTRY) = range(7)
CANCEL = ConversationHandler.END

# --- –¢–µ–∫—Å—Ç–æ–≤—ã–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã ---
MAIN_MENU_TEXT = (
    "Sneaker SHOP ‚Äî –ü—Ä–æ–¥–∞–∂–∞ —Ç–æ–ª—å–∫–æ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã—Ö –≤–µ—â–µ–π\n"
    "–ò–º–µ–µ—Ç—Å—è –±–æ–ª–µ–µ 2000 –æ—Ç–∑—ã–≤–æ–≤!\n"
    "–ú–æ—Å–∫–≤–∞ / –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–π –∫–æ–º–ø–∞–Ω–∏–µ–π –°–î–≠–ö\n\n"
    "–ö–∞–Ω–∞–ª —Å –Ω–∞–ª–∏—á–∏–µ–º: https://t.me/+8Y8sxODeiQIyYTgy\n"
    "–°–≤—è–∑—å / –ü–æ–∫—É–ø–∫–∞: @VibeeAdmin / @kir_tg1"
)
ADMIN_WELCOME_TEXT = "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å! –ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?"
ADD_ITEM_START_TEXT = "–ù–∞—á–∏–Ω–∞–µ–º –¥–æ–±–∞–≤–ª—è—Ç—å –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä. –í–≤–µ–¥–∏—Ç–µ –µ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, Nike Air Force 1). –î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ /cancel"
ADD_VARIANT_TEXT = "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –¥–æ–±–∞–≤—å—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã —Ç–æ–≤–∞—Ä–∞. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ä–∞–∑–º–µ—Ä, —Ü–µ–Ω—É –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª. –ù–∞–ø—Ä–∏–º–µ—Ä: `42 12000 5`. –ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /done"


# --- –ö–õ–ò–ï–ù–¢–°–ö–ê–Ø –ß–ê–°–¢–¨ –ë–û–¢–ê ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.effective_user.id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")
    try:
        with get_session() as session:
            if not session.query(User).filter_by(telegram_id=user_id).first():
                new_user = User(
                    telegram_id=user_id,
                    username=update.effective_user.username or f"user_{user_id}",
                    full_name=update.effective_user.full_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
                )
                session.add(new_user)
                session.commit()
                logger.info(f"–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}", exc_info=True)
    await show_main_menu(update, user_id)


async def show_main_menu(update: Update, user_id: int) -> None:
    keyboard = [[KeyboardButton("üõçÔ∏è –û—Ç–∫—Ä—ã—Ç—å –º–∞–≥–∞–∑–∏–Ω", web_app=WebAppInfo(url=f"{WEBAPP_URL}?user_id={user_id}"))],
                [KeyboardButton("üì¶ –ú–æ–∏ –∑–∞–∫–∞–∑—ã")]]
    await update.message.reply_text(MAIN_MENU_TEXT, reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True))


# --- –ê–î–ú–ò–ù–°–ö–ê–Ø –ß–ê–°–¢–¨ –ë–û–¢–ê ---
def admin_only(func):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º."""

    async def wrapped(update: Update, context: ContextTypes.DEFAULT_TYPE, *args, **kwargs):
        user_id = update.effective_user.id
        if user_id not in ADMIN_IDS:
            await update.message.reply_text("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
            return
        return await func(update, context, *args, **kwargs)

    return wrapped


@admin_only
async def admin_panel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∫–∏."""
    keyboard = [["‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä"], ["üìù –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤"], ["‚Ü©Ô∏è –í—ã–π—Ç–∏ –∏–∑ –∞–¥–º–∏–Ω–∫–∏"]]
    await update.message.reply_text(ADMIN_WELCOME_TEXT,
                                    reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True))


def upload_to_imgbb(image_bytes, filename="photo.jpg"):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –±–∞–π—Ç–æ–≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ ImgBB."""
    if not IMGBB_API_KEY: raise ValueError("IMGBB_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
    url = "https://api.imgbb.com/1/upload"
    payload = {"key": IMGBB_API_KEY}
    files = {"image": (filename, image_bytes, "image/jpeg")}
    response = requests.post(url, data=payload, files=files)
    response.raise_for_status()
    result = response.json()
    if result.get("success"):
        return result["data"]["url"]
    else:
        raise Exception(f"–û—à–∏–±–∫–∞ ImgBB: {result.get('error', {}).get('message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")


# --- –õ–æ–≥–∏–∫–∞ –¥–∏–∞–ª–æ–≥–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ ---
@admin_only
async def add_item_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data['new_product'] = {}
    await update.message.reply_text(ADD_ITEM_START_TEXT)
    return NAME


async def get_name(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data['new_product']['name'] = update.message.text
    await update.message.reply_text("–ë—Ä–µ–Ω–¥:")
    return BRAND


async def get_brand(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data['new_product']['brand'] = update.message.text
    keyboard = [["–∫—Ä–æ—Å—Å–æ–≤–∫–∏", "–æ–¥–µ–∂–¥–∞"]]
    await update.message.reply_text("–ö–∞—Ç–µ–≥–æ—Ä–∏—è:", reply_markup=ReplyKeyboardMarkup(keyboard, one_time_keyboard=True))
    return CATEGORY


async def get_category(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data['new_product']['category'] = update.message.text.lower()
    await update.message.reply_text("–û–ø–∏—Å–∞–Ω–∏–µ:")
    return DESCRIPTION


async def get_description(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data['new_product']['description'] = update.message.text
    await update.message.reply_text("–°–æ—Å—Ç–∞–≤ (–∏–ª–∏ '–Ω–µ—Ç'):")
    return COMPOSITION


async def get_composition(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data['new_product'][
        'composition'] = update.message.text if update.message.text.lower() != '–Ω–µ—Ç' else None
    await update.message.reply_text("–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–ª–∞–≤–Ω–æ–µ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞.")
    return PHOTO


async def get_photo(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    try:
        await update.message.reply_text("–ó–∞–≥—Ä—É–∂–∞—é —Ñ–æ—Ç–æ...")
        photo_file = await update.message.photo[-1].get_file()
        photo_bytes = await photo_file.download_as_bytearray()
        image_url = upload_to_imgbb(bytes(photo_bytes))
        context.user_data['new_product']['image_url'] = image_url

        await update.message.reply_text(ADD_VARIANT_TEXT, parse_mode='Markdown')
        return VARIANT_ENTRY
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –Ω–∞ —ç—Ç–∞–ø–µ —Ñ–æ—Ç–æ: {e}", exc_info=True)
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ: {e}")
        return CANCEL


async def get_variant(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    parts = update.message.text.split()
    if len(parts) != 3:
        await update.message.reply_text(
            "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ù—É–∂–Ω–æ —Ç—Ä–∏ –∑–Ω–∞—á–µ–Ω–∏—è: `—Ä–∞–∑–º–µ—Ä —Ü–µ–Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ`. –ù–∞–ø—Ä–∏–º–µ—Ä: `42 12000 5`. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            parse_mode='Markdown')
        return VARIANT_ENTRY

    try:
        size, price, stock = parts[0], int(parts[1]), int(parts[2])
        if 'variants' not in context.user_data['new_product']:
            context.user_data['new_product']['variants'] = []
        context.user_data['new_product']['variants'].append({'size': size, 'price': price, 'stock': stock})
        await update.message.reply_text(f"‚úÖ –†–∞–∑–º–µ—Ä {size} –¥–æ–±–∞–≤–ª–µ–Ω. –í–≤–µ–¥–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π –∏–ª–∏ /done –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.")
        return VARIANT_ENTRY
    except ValueError:
        await update.message.reply_text("–¶–µ–Ω–∞ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–∞–º–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return VARIANT_ENTRY


async def done(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–æ–≤–∞—Ä –∏ –≤—Å–µ –µ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö."""
    product_data = context.user_data.get('new_product')
    if not product_data or not product_data.get('variants'):
        await update.message.reply_text("–í—ã –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞. –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        return await cancel(update, context)

    try:
        with get_session() as session:
            # –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–æ–≤–∞—Ä
            new_product = Product(
                name=product_data['name'], brand=product_data['brand'], category=product_data['category'],
                description=product_data['description'], composition=product_data.get('composition'),
                image_url=product_data['image_url'], is_active=1
            )

            # –°–æ–∑–¥–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã
            for var_data in product_data['variants']:
                variant = ProductVariant(
                    size=var_data['size'], price=var_data['price'], stock=var_data['stock']
                )
                new_product.variants.append(variant)

            session.add(new_product)
            session.commit()
            product_id = new_product.id

        await update.message.reply_text(
            f"‚úÖ –¢–æ–≤–∞—Ä '{new_product.name}' (ID: {product_id}) —Å–æ –≤—Å–µ–º–∏ –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –≤ –ë–î: {e}", exc_info=True)
        await update.message.reply_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö: {e}")

    context.user_data.clear()
    await admin_panel(update, context)
    return CANCEL


async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data.clear()
    await update.message.reply_text("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    await admin_panel(update, context)
    return CANCEL


async def handle_regular_messages(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if update.message.text == "üì¶ –ú–æ–∏ –∑–∞–∫–∞–∑—ã":
        # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await update.message.reply_text("–†–∞–∑–¥–µ–ª '–ú–æ–∏ –∑–∞–∫–∞–∑—ã' –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.")
    elif update.message.text == "‚Ü©Ô∏è –í—ã–π—Ç–∏ –∏–∑ –∞–¥–º–∏–Ω–∫–∏":
        await start(update, context)
    else:
        # –î–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –≤ –∞–¥–º–∏–Ω–∫–µ
        if update.effective_user.id not in ADMIN_IDS:
            await show_main_menu(update, update.effective_user.id)
        else:
            # –î–ª—è –∞–¥–º–∏–Ω–∞, –∫–æ—Ç–æ—Ä—ã–π –Ω–∞–∂–∞–ª –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—É—é –∫–Ω–æ–ø–∫—É –≤ –∞–¥–º–∏–Ω-–º–µ–Ω—é
            await update.message.reply_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.")
            await admin_panel(update, context)


async def run_bot_async():
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞."""
    application = Application.builder().token(TOKEN).build()

    add_item_handler = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex('^‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä$'), add_item_start)],
        states={
            NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_name)],
            BRAND: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_brand)],
            CATEGORY: [MessageHandler(filters.Regex('^(–∫—Ä–æ—Å—Å–æ–≤–∫–∏|–æ–¥–µ–∂–¥–∞)$'), get_category)],
            DESCRIPTION: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_description)],
            COMPOSITION: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_composition)],
            PHOTO: [MessageHandler(filters.PHOTO, get_photo)],
            VARIANT_ENTRY: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_variant), CommandHandler('done', done)]
        },
        fallbacks=[CommandHandler('cancel', cancel)],
    )

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("admin", admin_panel))
    application.add_handler(add_item_handler)
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_regular_messages))

    logger.info("–ó–∞–ø—É—Å–∫ Telegram-–±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ polling...")
    async with application:
        await application.initialize()
        await application.start()
        await application.updater.start_polling()
        while True:
            await asyncio.sleep(3600)


if __name__ == "__main__":
    try:
        asyncio.run(run_bot_async())
    except KeyboardInterrupt:
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤—Ä—É—á–Ω—É—é.")