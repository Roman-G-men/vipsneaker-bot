# bot.py - –§–ò–ù–ê–õ–¨–ù–ê–Ø –í–ï–†–°–ò–Ø –° –í–°–¢–†–û–ï–ù–ù–û–ô TELEGRAM-–ê–î–ú–ò–ù–ö–û–ô –ò –û–ë–ù–û–í–õ–ï–ù–ù–´–ú–ò –ö–û–ù–¢–ê–ö–¢–ê–ú–ò

import logging
import os
import io
import requests
import asyncio
from contextlib import suppress
from telegram import Update, WebAppInfo, KeyboardButton, ReplyKeyboardMarkup
from telegram.ext import (
    Application, CommandHandler, ContextTypes, MessageHandler, filters, CallbackContext, ConversationHandler
)
from database import get_session, User, Order, Product

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO)
logger = logging.getLogger(__name__)

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
TOKEN = os.getenv("TOKEN")
WEBAPP_URL = os.getenv("WEBAPP_URL")
IMGBB_API_KEY = os.getenv("IMGBB_API_KEY")

# –í—Å—Ç–∞–≤—å —Å—é–¥–∞ —Å–≤–æ–π Telegram User ID. –ß—Ç–æ–±—ã –µ–≥–æ —É–∑–Ω–∞—Ç—å, –Ω–∞–ø–∏—à–∏ –±–æ—Ç—É @userinfobot
ADMIN_IDS = [8141146399, ]  # –ú–æ–∂–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ ID —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é

# --- –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –¥–∏–∞–ª–æ–≥–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ ---
(NAME, BRAND, CATEGORY, SIZE, PRICE, DESCRIPTION, COMPOSITION, PHOTO) = range(8)
CANCEL = ConversationHandler.END

# --- –¢–µ–∫—Å—Ç–æ–≤—ã–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã ---
MAIN_MENU_TEXT = (
    "Sneaker SHOP ‚Äî –ü—Ä–æ–¥–∞–∂–∞ —Ç–æ–ª—å–∫–æ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã—Ö –≤–µ—â–µ–π\n"
    "–ò–º–µ–µ—Ç—Å—è –±–æ–ª–µ–µ 2000 –æ—Ç–∑—ã–≤–æ–≤!\n"
    "–ú–æ—Å–∫–≤–∞ / –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–π –∫–æ–º–ø–∞–Ω–∏–µ–π –°–î–≠–ö\n\n"
    "–ö–∞–Ω–∞–ª —Å –Ω–∞–ª–∏—á–∏–µ–º: https://t.me/+8Y8sxODeiQIyYTgy\n"
    # <<< –ò–ó–ú–ï–ù–ï–ù–ò–ï –ó–î–ï–°–¨ >>>
    "–°–≤—è–∑—å / –ü–æ–∫—É–ø–∫–∞: @VibeeAdmin / @kir_tg1"
)


# --- –ö–õ–ò–ï–ù–¢–°–ö–ê–Ø –ß–ê–°–¢–¨ –ë–û–¢–ê ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.effective_user.id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")
    try:
        with get_session() as session:
            if not session.query(User).filter_by(telegram_id=user_id).first():
                new_user = User(
                    telegram_id=user_id,
                    username=update.effective_user.username or f"user_{user_id}",
                    full_name=update.effective_user.full_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
                )
                session.add(new_user)
                session.commit()
                logger.info(f"–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}", exc_info=True)
    await show_main_menu(update, user_id)


async def show_main_menu(update: Update, user_id: int) -> None:
    keyboard = [[KeyboardButton("üõçÔ∏è –û—Ç–∫—Ä—ã—Ç—å –º–∞–≥–∞–∑–∏–Ω", web_app=WebAppInfo(url=f"{WEBAPP_URL}?user_id={user_id}"))],
                [KeyboardButton("üì¶ –ú–æ–∏ –∑–∞–∫–∞–∑—ã")]]
    await update.message.reply_text(MAIN_MENU_TEXT, reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True))


# --- –ê–î–ú–ò–ù–°–ö–ê–Ø –ß–ê–°–¢–¨ –ë–û–¢–ê ---
def admin_only(func):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º."""

    async def wrapped(update: Update, context: ContextTypes.DEFAULT_TYPE, *args, **kwargs):
        user_id = update.effective_user.id
        if user_id not in ADMIN_IDS:
            logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–ø—ã—Ç–∞–ª—Å—è –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∞–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥–µ.")
            await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
            return
        return await func(update, context, *args, **kwargs)

    return wrapped


@admin_only
async def admin_panel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    keyboard = [["–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä"], ["–°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ (—Å–∫–æ—Ä–æ)"], ["–í—ã–π—Ç–∏ –∏–∑ –∞–¥–º–∏–Ω–∫–∏"]]
    await update.message.reply_text("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å!",
                                    reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True))


def upload_to_imgbb(image_bytes, filename="photo.jpg"):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –±–∞–π—Ç–æ–≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ ImgBB."""
    if not IMGBB_API_KEY: raise ValueError("IMGBB_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
    url = "https://api.imgbb.com/1/upload"
    payload = {"key": IMGBB_API_KEY}
    files = {"image": (filename, image_bytes, "image/jpeg")}
    response = requests.post(url, data=payload, files=files)
    result = response.json()
    if result.get("success"):
        return result["data"]["url"]
    else:
        raise Exception(f"–û—à–∏–±–∫–∞ ImgBB: {result.get('error', {}).get('message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")


@admin_only
async def add_item_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data['new_product'] = {}
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ (–∏–ª–∏ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã):")
    return NAME


async def get_name(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data['new_product']['name'] = update.message.text
    await update.message.reply_text("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –±—Ä–µ–Ω–¥:")
    return BRAND


async def get_brand(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data['new_product']['brand'] = update.message.text
    keyboard = [["–∫—Ä–æ—Å—Å–æ–≤–∫–∏", "–æ–¥–µ–∂–¥–∞"]]
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
                                    reply_markup=ReplyKeyboardMarkup(keyboard, one_time_keyboard=True,
                                                                     resize_keyboard=True))
    return CATEGORY


async def get_category(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data['new_product']['category'] = update.message.text.lower()
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Ä–∞–∑–º–µ—Ä:")
    return SIZE


async def get_size(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data['new_product']['size'] = update.message.text
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã):")
    return PRICE


async def get_price(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    try:
        context.user_data['new_product']['price'] = int(update.message.text)
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:")
        return DESCRIPTION
    except ValueError:
        await update.message.reply_text("–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return PRICE


async def get_description(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data['new_product']['description'] = update.message.text
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Å–æ—Å—Ç–∞–≤ (–∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–Ω–µ—Ç'):")
    return COMPOSITION


async def get_composition(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data['new_product'][
        'composition'] = update.message.text if update.message.text.lower() != '–Ω–µ—Ç' else None
    await update.message.reply_text("–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–ª–∞–≤–Ω–æ–µ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞.")
    return PHOTO


async def get_photo(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    try:
        await update.message.reply_text("–ó–∞–≥—Ä—É–∂–∞—é —Ñ–æ—Ç–æ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")
        photo_file = await update.message.photo[-1].get_file()
        photo_bytes = await photo_file.download_as_bytearray()
        image_url = upload_to_imgbb(bytes(photo_bytes))

        product_data = context.user_data['new_product']
        with get_session() as session:
            new_product = Product(
                name=product_data['name'], brand=product_data['brand'], category=product_data['category'],
                size=product_data['size'], price=product_data['price'], description=product_data['description'],
                composition=product_data.get('composition'), image_url=image_url, is_active=1
            )
            session.add(new_product)
            session.commit()
            product_id = new_product.id

        await update.message.reply_text(f"–¢–æ–≤–∞—Ä '{new_product.name}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω! ID: {product_id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞: {e}", exc_info=True)
        await update.message.reply_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

    context.user_data.clear()
    await admin_panel(update, context)
    return CANCEL


async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data.clear()
    await update.message.reply_text("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    await admin_panel(update, context)
    return CANCEL


async def handle_regular_messages(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –æ—Ç–≤–µ—Ç–∞ –Ω–∞ "–ú–æ–∏ –∑–∞–∫–∞–∑—ã" –∏ –¥—Ä—É–≥–∏–µ –∫–Ω–æ–ø–∫–∏
    # –ù–æ –ø–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await show_main_menu(update, update.effective_user.id)


async def run_bot_async():
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞."""
    application = Application.builder().token(TOKEN).build()

    add_item_handler = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex('^–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä$'), add_item_start)],
        states={
            NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_name)],
            BRAND: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_brand)],
            CATEGORY: [MessageHandler(filters.Regex('^(–∫—Ä–æ—Å—Å–æ–≤–∫–∏|–æ–¥–µ–∂–¥–∞)$'), get_category)],
            SIZE: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_size)],
            PRICE: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_price)],
            DESCRIPTION: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_description)],
            COMPOSITION: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_composition)],
            PHOTO: [MessageHandler(filters.PHOTO, get_photo)],
        },
        fallbacks=[CommandHandler('cancel', cancel)],
    )

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("admin", admin_panel))
    application.add_handler(add_item_handler)
    # –û–±—ã—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–æ–ª–∂–Ω—ã –∏–¥—Ç–∏ –ø–æ—Å–ª–µ ConversationHandler
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_regular_messages))

    logger.info("–ó–∞–ø—É—Å–∫ Telegram-–±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ polling...")
    async with application:
        await application.initialize()
        await application.start()
        await application.updater.start_polling()
        while True:
            await asyncio.sleep(3600)