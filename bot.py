# bot.py - –í–ï–†–°–ò–Ø, –°–û–í–ú–ï–°–¢–ò–ú–ê–Ø –° –õ–û–ö–ê–õ–¨–ù–´–ú main.py

import logging
import os
import asyncio
from contextlib import suppress
from telegram import Update, WebAppInfo, KeyboardButton, ReplyKeyboardMarkup
from telegram.ext import (
    Application, CommandHandler, ContextTypes, MessageHandler, filters, CallbackContext
)
from database import get_session, User, Order

logging.basicConfig(format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO)
logger = logging.getLogger(__name__)

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
TOKEN = os.getenv("TOKEN")
WEBAPP_URL = os.getenv("WEBAPP_URL")

if not TOKEN or not WEBAPP_URL:
    raise ValueError("–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ TOKEN –∏–ª–∏ WEBAPP_URL –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ .env —Ñ–∞–π–ª–µ!")
logger.info("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞.")

# --- –¢–µ–∫—Å—Ç–æ–≤—ã–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã ---
MAIN_MENU_TEXT = (
    "Sneaker SHOP ‚Äî –ü—Ä–æ–¥–∞–∂–∞ —Ç–æ–ª—å–∫–æ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã—Ö –≤–µ—â–µ–π\n"
    "–ò–º–µ–µ—Ç—Å—è –±–æ–ª–µ–µ 2000 –æ—Ç–∑—ã–≤–æ–≤!\n"
    "–ú–æ—Å–∫–≤–∞ / –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–π –∫–æ–º–ø–∞–Ω–∏–µ–π –°–î–≠–ö\n\n"
    "–ö–∞–Ω–∞–ª —Å –Ω–∞–ª–∏—á–∏–µ–º: https://t.me/+8Y8sxODeiQIyYTgy\n"
    "–°–≤—è–∑—å / –ü–æ–∫—É–ø–∫–∞: @RSA57 / @che_rnila"
)


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.effective_user.id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")
    try:
        with get_session() as session:
            user = session.query(User).filter_by(telegram_id=user_id).first()
            if not user:
                new_user = User(
                    telegram_id=user_id,
                    username=update.effective_user.username or f"user_{user_id}",
                    full_name=update.effective_user.full_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
                )
                session.add(new_user)
                session.commit()
                logger.info(f"–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id}")
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}", exc_info=True)
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–∞—Å –≤ —Å–∏—Å—Ç–µ–º–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return
    await show_main_menu(update, user_id)


async def handle_message(update: Update, context: CallbackContext) -> None:
    text = update.message.text
    if text == "üì¶ –ú–æ–∏ –∑–∞–∫–∞–∑—ã":
        await show_orders(update, update.effective_user.id)
    else:
        await show_main_menu(update, update.effective_user.id)


async def show_main_menu(update: Update, user_id: int) -> None:
    keyboard = [[KeyboardButton("üõçÔ∏è –û—Ç–∫—Ä—ã—Ç—å –º–∞–≥–∞–∑–∏–Ω", web_app=WebAppInfo(url=f"{WEBAPP_URL}?user_id={user_id}"))],
                [KeyboardButton("üì¶ –ú–æ–∏ –∑–∞–∫–∞–∑—ã")]]
    await update.message.reply_text(MAIN_MENU_TEXT, reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True))


async def show_orders(update: Update, user_id: int) -> None:
    try:
        with get_session() as session:
            orders = session.query(Order).filter_by(user_id=user_id).order_by(Order.created_at.desc()).limit(5).all()
            response = "üì¶ –í–∞—à–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –∑–∞–∫–∞–∑–æ–≤:\n\n" + "\n\n".join(
                [f"–ó–∞–∫–∞–∑ #{o.id} –æ—Ç {o.created_at.strftime('%d.%m.%Y')}\n–°—Ç–∞—Ç—É—Å: {o.status}" for o in
                 orders]) if orders else "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤."
        keyboard = [[KeyboardButton("üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é")]]
        await update.message.reply_text(response, reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True))
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è {user_id}: {e}", exc_info=True)
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∑–∞–∫–∞–∑–æ–≤.")


async def web_app_data(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text("‚úÖ –ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω! –° –≤–∞–º–∏ —Å–≤—è–∂—É—Ç—Å—è –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π.")


async def error_handler(update: object, context: CallbackContext) -> None:
    logger.error(f"–ü–µ—Ä–µ—Ö–≤–∞—á–µ–Ω–∞ –æ—à–∏–±–∫–∞: {context.error}", exc_info=True)
    if isinstance(update, Update) and update.effective_message:
        with suppress(Exception): await update.effective_message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞.")


# <<< –í–û–¢ –§–£–ù–ö–¶–ò–Ø, –ö–û–¢–û–†–£–Æ –ò–©–ï–¢ main.py >>>
async def run_bot_async():
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞."""
    application = Application.builder().token(TOKEN).build()
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    application.add_handler(MessageHandler(filters.StatusUpdate.WEB_APP_DATA, web_app_data))
    application.add_error_handler(error_handler)

    logger.info("–ó–∞–ø—É—Å–∫ Telegram-–±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ polling...")
    async with application:
        await application.initialize()
        await application.start()
        await application.updater.start_polling()
        # –≠—Ç–æ—Ç –±–ª–æ–∫ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –≤–µ—á–Ω–æ, –ø–æ–∫–∞ –µ–≥–æ –Ω–µ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç main.py
        while True:
            await asyncio.sleep(3600)


# –≠—Ç–æ—Ç –±–ª–æ–∫ –Ω—É–∂–µ–Ω, —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å bot.py –æ—Ç–¥–µ–ª—å–Ω–æ –¥–ª—è —Ç–µ—Å—Ç–∞
if __name__ == "__main__":
    try:
        asyncio.run(run_bot_async())
    except KeyboardInterrupt:
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤—Ä—É—á–Ω—É—é.")