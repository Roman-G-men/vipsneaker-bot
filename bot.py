# bot.py - –ö–õ–ò–ï–ù–¢–°–ö–ò–ô –ë–û–¢ (–ü–†–û–°–¢–ê–Ø –ò –ù–ê–î–ï–ñ–ù–ê–Ø –í–ï–†–°–ò–Ø)

import logging
import os
import json
from telegram import Update, WebAppInfo, KeyboardButton, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from database import get_session, User, Order

logging.basicConfig(format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO)
logger = logging.getLogger(__name__)

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
TOKEN = os.getenv("TOKEN")
WEBAPP_URL = os.getenv("WEBAPP_URL")

# --- –¢–µ–∫—Å—Ç–æ–≤—ã–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã ---
MAIN_MENU_TEXT = (
    "Sneaker SHOP ‚Äî –ü—Ä–æ–¥–∞–∂–∞ —Ç–æ–ª—å–∫–æ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã—Ö –≤–µ—â–µ–π\n"
    "–ò–º–µ–µ—Ç—Å—è –±–æ–ª–µ–µ 2000 –æ—Ç–∑—ã–≤–æ–≤!\n"
    "–ú–æ—Å–∫–≤–∞ / –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–π –∫–æ–º–ø–∞–Ω–∏–µ–π –°–î–≠–ö\n\n"
    "–ö–∞–Ω–∞–ª —Å –Ω–∞–ª–∏—á–∏–µ–º: https://t.me/+8Y8sxODeiQIyYTgy\n"
    "–°–≤—è–∑—å / –ü–æ–∫—É–ø–∫–∞: @VibeeAdmin / @kir_tg1"
)


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç /start, —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
    user_id = update.effective_user.id
    logger.info(f"–ö–ª–∏–µ–Ω—Ç—Å–∫–∏–π –±–æ—Ç: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—É—Å—Ç–∏–ª /start.")
    try:
        with get_session() as session:
            if not session.query(User).filter_by(telegram_id=user_id).first():
                new_user = User(telegram_id=user_id, username=update.effective_user.username or f"user_{user_id}",
                                full_name=update.effective_user.full_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
                session.add(new_user)
                session.commit()
                logger.info(f"–ö–ª–∏–µ–Ω—Ç—Å–∫–∏–π –±–æ—Ç: –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id}")
    except Exception as e:
        logger.error(f"–ö–ª–∏–µ–Ω—Ç—Å–∫–∏–π –±–æ—Ç: –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}", exc_info=True)

    keyboard = [[KeyboardButton("üõçÔ∏è –û—Ç–∫—Ä—ã—Ç—å –º–∞–≥–∞–∑–∏–Ω", web_app=WebAppInfo(url=f"{WEBAPP_URL}?user_id={user_id}"))],
                [KeyboardButton("üì¶ –ú–æ–∏ –∑–∞–∫–∞–∑—ã")]]
    await update.message.reply_text(MAIN_MENU_TEXT, reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True))


async def my_orders_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –µ–≥–æ –∑–∞–∫–∞–∑—ã."""
    user_id = update.effective_user.id
    logger.info(f"–ö–ª–∏–µ–Ω—Ç—Å–∫–∏–π –±–æ—Ç: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª '–ú–æ–∏ –∑–∞–∫–∞–∑—ã'.")
    with get_session() as session:
        orders = session.query(Order).filter_by(user_id=user_id).order_by(Order.created_at.desc()).limit(5).all()
    if not orders:
        await update.message.reply_text("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤.");
        return

    response = "üì¶ **–í–∞—à–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –∑–∞—è–≤–æ–∫/–∑–∞–∫–∞–∑–æ–≤:**\n\n"
    for order in orders:
        items_list = json.loads(order.items)
        items_text = ", ".join([f"{item['name']} ({item['size']})" for item in items_list])
        response += f"**–ó–∞–∫–∞–∑ #{order.id}** –æ—Ç {order.created_at.strftime('%d.%m.%Y')}\n–°—Ç–∞—Ç—É—Å: `{order.status}`\n–°—É–º–º–∞: {order.total_amount} —Ä—É–±.\n\n"
    await update.message.reply_text(response, parse_mode='Markdown')


async def web_app_data_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–∏–Ω–∏–º–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ Mini App –∏ —Å–æ–∑–¥–∞–µ—Ç –∑–∞–∫–∞–∑."""
    try:
        data = json.loads(update.effective_message.web_app_data.data)
        user = update.effective_user
        if data.get('type') == 'newOrder':
            with get_session() as session:
                new_order = Order(user_id=user.id, items=json.dumps(data.get('items')),
                                  total_amount=data.get('total_price'), status='–û–±—Ä–∞–±–æ—Ç–∫–∞')
                session.add(new_order);
                session.commit()
                order_id = new_order.id

            items_list = data.get('items', [])
            preview_image_url = items_list[0].get('image_url') if items_list else None
            order_text = f"üìù **–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –∑–∞–∫–∞–∑ #{order_id}**\n\n" + "**–°–æ—Å—Ç–∞–≤:**\n" + "\n".join(
                [f" ‚Ä¢ {i.get('name')} ({i.get('size')})" for i in items_list])
            order_text += f"\n\n**–ò—Ç–æ–≥–æ:** {data.get('total_price')} —Ä—É–±.\n\n" + "üëá **–î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞... –ø–µ—Ä–µ—à–ª–∏—Ç–µ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä—É:**\n" + "‚û°Ô∏è @VibeeAdmin –∏–ª–∏ @kir_tg1"
            if preview_image_url:
                await update.message.reply_photo(photo=preview_image_url, caption=order_text, parse_mode='Markdown')
            else:
                await update.message.reply_text(order_text, parse_mode='Markdown')
    except Exception as e:
        logger.error(f"–ö–ª–∏–µ–Ω—Ç—Å–∫–∏–π –±–æ—Ç: –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ WebApp –¥–∞–Ω–Ω—ã—Ö: {e}", exc_info=True)
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞. –°–≤—è–∂–∏—Ç–µ—Å—å —Å @VibeeAdmin")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–≥–æ –±–æ—Ç–∞."""
    if not TOKEN:
        logger.critical("–¢–æ–∫–µ–Ω –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–≥–æ –±–æ—Ç–∞ (TOKEN) –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return

    application = Application.builder().token(TOKEN).build()
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.StatusUpdate.WEB_APP_DATA, web_app_data_handler))
    application.add_handler(MessageHandler(filters.Regex('^üì¶ –ú–æ–∏ –∑–∞–∫–∞–∑—ã$'), my_orders_handler))

    logger.info("–ö–ª–∏–µ–Ω—Ç—Å–∫–∏–π –±–æ—Ç VIPSneakerBot_bot –∑–∞–ø—É—â–µ–Ω...")
    application.run_polling()


if __name__ == "__main__":
    main()